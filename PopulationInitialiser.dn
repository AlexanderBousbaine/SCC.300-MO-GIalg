
component provides PopulationInitialiser requires util.Random rand, io.Output out, data.DecUtil du, data.IntUtil iu, util.Math math, time.Calendar cal{
	
	/*
		APPROACH 1:
		Randomly choose values from the domains for each variable
		Assess the uniqueness of the chosen variables and if they are at least n (50%?) unique, then allow them to become a population member
		Allow pass value to decrease as the number of successful configurations increase
		
		APPROACH 2:
		Create local copies of all the domains.
		Randomly select values from the domains for each variable.
		Remove selected value from the value pool once chosen.
		Repeat.
	
	*/
	int numOpWeights = 15
	
	GiaConfig[] PopulationInitialiser:generateInitialPopConfigs(int popSize) {
		DateTime time = cal.getTime()
		rand.setSeed(time.minute + time.second + time.millisecond)
		
		int numGoodConfigs = 0
		int totalConfigs = 0
		int passValue = 3
		int evalVal = 0
		
		GiaConfig configs[] = new GiaConfig[popSize]()
		
		while(numGoodConfigs < popSize) {
		
			dec mutPerc = restrictToMultFive(roundTo2DP(rand.getDec(ConfigDomains.MUTPERC_LOWER, ConfigDomains.MUTPERC_UPPER)))
			
			dec hgtPerc = restrictToMultFive(roundTo2DP(rand.getDec(ConfigDomains.HGTPERC_LOWER, ConfigDomains.HGTPERC_UPPER)))
			//0 to 15 (inclusive)
			int elites = rand.getInt(ConfigDomains.ELITES_UPPER+1)
			//1 to 15 (inclusive)
			//int mutLim = rand.getInt(ConfigDomains.MUTLIM_UPPER)+1
			int mutLim = 1
			
			int a
			dec mutWeights[] = new dec[4]
			dec mwTotal = 0.0
			for(a = 0; a < 4; a++) {
				mutWeights[a] = restrictToMultFive(roundTo2DP(rand.getDec(ConfigDomains.MUTWEIGHT_LOWER, ConfigDomains.MUTWEIGHT_UPPER)))
				mwTotal = mwTotal + mutWeights[a]
			}
			
			//if all weights are 0, set them to 1 as it's functionally the same and won't cause problems
			if(mwTotal == 0){
				for(a = 0; a < 4; a++) {
					mutWeights[a] = 1
				}
			}

			dec opWeights[] = new dec[numOpWeights]
			dec opTotal = 0.0
			for(a = 0; a < numOpWeights; a++) {
				opWeights[a] = restrictToMultFive(roundTo2DP(rand.getDec(ConfigDomains.OPWEIGHT_LOWER, ConfigDomains.OPWEIGHT_UPPER)))
				opTotal = opTotal + opWeights[a]
			}
			
			//if all weights are 0, set them to 1 as it's functionally the same and won't cause problems
			if(opTotal == 0){
				for(a = 0; a < numOpWeights; a++) {
					opWeights[a] = 1
				}
			}
			
			GiaConfig c = new GiaConfig(mutPerc, hgtPerc, elites, mutLim, mutWeights, opWeights)
			
			evalVal = evaluateConfig(c, configs, numGoodConfigs)
			//out.println("Config Evaluation Value: $evalVal")
			
			//pass value should decrease with every successful 
			if(evalVal <= passValue){
				//out.println("Config Passes")
				configs[numGoodConfigs] = c
				numGoodConfigs++
				//passValue -= numGoodConfigs
			}
			else{
				out.println("Config fails ($numGoodConfigs / $popSize); with $evalVal similar values ($totalConfigs)")
			}
			
			totalConfigs++
			//out.println("Config attempt $totalConfigs")
			
			passValue = numGoodConfigs+math.round(totalConfigs/10)
		}
		
		return configs
	}
	
	GiaConfig PopulationInitialiser:generateSingleConfig() {
		dec mutPerc = restrictToMultFive(roundTo2DP(rand.getDec(ConfigDomains.MUTPERC_LOWER, ConfigDomains.MUTPERC_UPPER)))
			
		dec hgtPerc = restrictToMultFive(roundTo2DP(rand.getDec(ConfigDomains.HGTPERC_LOWER, ConfigDomains.HGTPERC_UPPER)))
		//0 to 15 (inclusive)
		int elites = rand.getInt(ConfigDomains.ELITES_UPPER+1)
		//1 to 15 (inclusive)
		//int mutLim = rand.getInt(ConfigDomains.MUTLIM_UPPER)+1
		int mutLim = 1
		
		int a
		dec mutWeights[] = new dec[4]
		for(a = 0; a < 4; a++) {
			mutWeights[a] = restrictToMultFive(roundTo2DP(rand.getDec(ConfigDomains.MUTWEIGHT_LOWER, ConfigDomains.MUTWEIGHT_UPPER)))
		}

		dec opWeights[] = new dec[numOpWeights]
		for(a = 0; a < numOpWeights; a++) {
			opWeights[a] = restrictToMultFive(roundTo2DP(rand.getDec(ConfigDomains.OPWEIGHT_LOWER, ConfigDomains.OPWEIGHT_UPPER)))
		}
		
		return new GiaConfig(mutPerc, hgtPerc, elites, mutLim, mutWeights, opWeights)
	}
	
	int PopulationInitialiser:evaluateConfig(GiaConfig config, GiaConfig allConfigs[], int numConfigs) {
		int score = 0
		
		//if there is more than 1 config already created
		if(numConfigs > 1) {
		
			//iterate through all current configs
			for(int i = 0; i < numConfigs; i++) {
				
				GiaConfig compareFig = allConfigs[i]
				
				//iterate through all singular fields of the GiaConfig object
				for(int f = 0; f < 4; f++) {
				
					//if value of field in question matches
					if(config:.f == compareFig:.f) {
						score++
					}
				}
				
				int a
				dec temp1[] = config:.4
				dec temp2[] = compareFig:.4
				//iterate through mutWeights
				for(a = 0; a < 4; a++){
					if(temp1[a] == temp2[a]) {
						score++
					}
				}
				
				temp1 = config:.5
				temp2 = compareFig:.5
				//iterate through opWeights
				for(a = 0; a < numOpWeights; a++){
					if(temp1[a] == temp2[a]) {
						score++
					}
				}				
			}
		}
		//-1 because all mutLim will be the same
		if(score > 0) {
			score--
		}
		return score
	}
	
	void PopulationInitialiser:printConfig(GiaConfig c) {
	
		dec v1 = c.mutationPercentage
		dec v2 = c.hgtPercentage
		int v3 = c.numElites
		int v4 = c.mutationLimit
		dec v5[] = c.mutWeights
		dec v6[] = c.opWeights
		int i
		dec t
		
		out.println("mutPercentage: $v1")
		out.println("hgtPercentage: $v2")
		out.println("elites: $v3")
		out.println("mutationLimit: $v4")
		
		out.print("mutation Weights: ")
		for(i = 0; i < 4; i++){
			t = v5[i]
			out.print("$t ")
		}
		out.println("")
		
		out.print("operation Weights: ")
		for(i = 0; i < 10; i++) {
			t = v6[i]
			out.print("$t ")
		}
		out.println("")
	}
	
	dec PopulationInitialiser:roundTo2DP(dec d){
		return (math.round(d*100)/100)
	}
	
	dec PopulationInitialiser:restrictToMultFive(dec d) {
		dec temp = d*100
		temp = math.round(temp/5)*5
		return temp/100		
	}
	
	char[] PopulationInitialiser:stringify(GiaConfig c) {
		char result[] = ""
	
		dec v1 = c.mutationPercentage
		dec v2 = c.hgtPercentage
		int v3 = c.numElites
		int v4 = c.mutationLimit
		dec v5[] = c.mutWeights
		dec v6[] = c.opWeights
		
		result = "$v1 $v2 $v3 $v4 $(v5[0]) $(v5[1]) $(v5[2]) $(v5[3]) $(v6[0]) $(v6[1]) $(v6[2]) $(v6[3]) $(v6[4]) $(v6[5]) $(v6[6]) $(v6[7]) $(v6[8]) $(v6[9]) $(v6[10]) $(v6[11]) $(v6[12]) $(v6[13]) $(v6[14])"
		
		return result
		
	}
	
	char[] PopulationInitialiser:stringifyCommad(GiaConfig c) {
		char result[] = ""
	
		dec v1 = c.mutationPercentage
		dec v2 = c.hgtPercentage
		int v3 = c.numElites
		int v4 = c.mutationLimit
		dec v5[] = c.mutWeights
		dec v6[] = c.opWeights
		
		result = "$v1,$v2,$v3,$v4,$(v5[0]),$(v5[1]),$(v5[2]),$(v5[3]),$(v6[0]),$(v6[1]),$(v6[2]),$(v6[3]),$(v6[4]),$(v6[5]),$(v6[6]),$(v6[7]),$(v6[8]),$(v6[9]),$(v6[10]),$(v6[11]),$(v6[12]),$(v6[13]),$(v6[14])"
		
		return result
		
	}

}